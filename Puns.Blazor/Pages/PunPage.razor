@page "/puns"
@using WordNet

<div class="themeBox">
<br/>
<label>Theme</label>
<input type="text" style="width: 100%" @bind="Theme"/>
<br/>
</div>


@foreach (var synSet in SynSets)
{

    var changeFunc = new Action<ChangeEventArgs>((e) =>
    {
        if (!_crossedOffSynsets.Add(synSet))
            _crossedOffSynsets.Remove(synSet);
    });

    <div class="synsetBox">
    <input type="checkbox" checked="@(!_crossedOffSynsets.Contains(synSet))" @onchange="changeFunc" />
    <label>@synSet.Gloss</label>
    <br />
    </div>

}
<br />

<div class="categoryBox">
<label>Category</label>
<select @bind="PunCategory">
    @foreach (var c in Enum.GetValues<PunCategory>())
    {
        <option value="@c">@c</option>
    }
</select>

</div>

<br/>

<div class="GenerateButton">
    <button disabled="@(IsGenerating || !Enabled)" class="btn btn-primary" @onclick="Find">
    @(IsGenerating? "Generating Puns" :(Enabled?"Pun!":"Loading Pun Data") )
    </button>
</div>

<br/>
<br/>
<hr/>

@if(PunList != null)
{
    @foreach (var grouping in PunList)
{

        var collapsed = !RevealedWords.Contains(grouping.Key);

        Action toggle = () =>
        {
            if (!RevealedWords.Add(grouping.Key))
                RevealedWords.Remove(grouping.Key);
        };

    <div class="punHeader">
        <h1>
        @grouping.Key (@grouping.Count())
        <button @onclick="toggle">@(collapsed?"+":"-")</button>
    </h1>
    </div>



    <div hidden="@collapsed" class="punGroup">
        @foreach (var pun in grouping)
    {
        <br/>
        <label>@pun.NewPhrase</label>
        <label> (@pun.OldPhrase)</label>
        <br/>
    }

    </div>


}
}


@code {


    public PunCategory PunCategory { get; set; } = PunCategory.Idiom;

    public string? Theme { get; set; }// = "Fish";

    public IEnumerable<SynSet> SynSets => GetSynSets(Theme);


    private readonly HashSet<SynSet> _crossedOffSynsets = new HashSet<SynSet>();

    public bool Enabled { get; private set; } = true;

    public IReadOnlyCollection<IGrouping<string, Pun>>? PunList { get; set; }

    private HashSet<string> RevealedWords { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

    public bool IsGenerating { get; set; } = false;

    private IEnumerable<SynSet> GetSynSets(string theme)
    {
        if(string.IsNullOrWhiteSpace(Theme))
            return Enumerable.Empty<SynSet>();
        else
        {
            var sets = WordData.GetSynsets(Theme).ToList();
            return sets;
        }
    }


    private void Find()
    {
        if (string.IsNullOrWhiteSpace(Theme))
        {
            IsGenerating = false;
            return;
        }

        IsGenerating = true;

        PunList = null;
        RevealedWords.Clear();

        Console.WriteLine(@"Getting Puns");

        var puns = SynSets.Except(_crossedOffSynsets)
            .SelectMany(synSet => PunHelper.GetPuns(PunCategory, Theme, synSet));

        PunList = puns
            .Distinct()
            .GroupBy(x=>x.Word, StringComparer.OrdinalIgnoreCase)
            .OrderByDescending(x=>x.Count())
            .ToList();

        Console.WriteLine($@"{PunList.Count} Puns Got");

        IsGenerating = false;
        this.StateHasChanged();
    }
}
