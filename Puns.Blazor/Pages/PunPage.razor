@page "/puns"
@using Syn.Oryzer.LanguageProcessing.WordNet
@using System.Collections.Immutable

<br/>
<label>Theme</label>
<input type="text" style="width: 100%" @bind="Theme"/>
<br/>

@foreach (var synSet in SynSets)
{

    var changeFunc = new Action<ChangeEventArgs>((e) =>
    {
        if (!_crossedOffSynsets.Add(synSet))
            _crossedOffSynsets.Remove(synSet);
    });


    <input type="checkbox" checked="@(!_crossedOffSynsets.Contains(synSet))" @onchange="changeFunc" />
    <label>@synSet.Gloss</label>
    <br />
}
<br />


<label>Category</label>
<select @bind="PunCategory">
    @foreach (var c in Enum.GetValues<PunCategory>())
    {
        <option value="@c">@c</option>
    }
</select>
<br/>


<button disabled="@(!Enabled)" class="btn btn-primary" @onclick="Find">
    @(Enabled?"Pun!":"Loading Pun Data")
</button>
<br/>



<br/>

<hr/>

@if(PunList != null)
{



    @foreach (var grouping in PunList)
{

        var collapsed = !RevealedWords.Contains(grouping.Key);

        Action toggle = () =>
        {
            if (!RevealedWords.Add(grouping.Key))
                RevealedWords.Remove(grouping.Key);
        };

    <h1>
        @grouping.Key (@grouping.Count())
        <button @onclick="toggle">@(collapsed?"+":"-")</button>
    </h1>

    <div hidden="@collapsed">
        @foreach (var pun in grouping)
    {
        <br/>
        <label>@pun.NewPhrase</label>
        <br/>
    }

    </div>


}
}


@code {


    public PunCategory PunCategory { get; set; } = PunCategory.Idiom;

    public string? Theme { get; set; }// = "Fish";

    public IEnumerable<SynSet> SynSets => string.IsNullOrWhiteSpace(Theme)? ImmutableList<SynSet>.Empty : WordData.GetSynsets(Theme);


    private readonly HashSet<SynSet> _crossedOffSynsets = new HashSet<SynSet>();

    public bool Enabled { get; private set; } = true;

    public IReadOnlyCollection<IGrouping<string, Pun>>? PunList { get; set; }

    private HashSet<string> RevealedWords { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase);



    private void Find()
    {
        if (string.IsNullOrWhiteSpace(Theme)) return;

        PunList = null;
        RevealedWords.Clear();

        var puns = SynSets.Except(_crossedOffSynsets)
            .SelectMany(synSet => PunHelper.GetPuns(PunCategory, Theme, synSet));

        PunList = puns
            .Distinct()
            .GroupBy(x=>x.Word, StringComparer.OrdinalIgnoreCase)
            .OrderByDescending(x=>x.Count())
            .ToList();
    }
}
